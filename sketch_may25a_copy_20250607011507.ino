#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>

const long measurementInterval = 30 * 1000; // –ò–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑–º–µ—Ä–µ–Ω–∏–π (–≤ –º—Å)
unsigned long lastMeasurementTime = 0;

int measurementCount = 0;

//–ü–∏–Ω—ã –¥–∞—Ç—á–∏–∫–∞ –¥–æ–∂–¥—è
#define RAIN_ANALOG_PIN 34
#define RAIN_DIGITAL_PIN 35

//–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BME280
Adafruit_BME280 bme;

//–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
float lastTemp = NAN;
float lastHumidity = NAN;
bool wasRaining = false;

void setup() {
  Serial.begin(115200);
  delay(1000);

  pinMode(RAIN_DIGITAL_PIN, INPUT);

  if (!bme.begin(0x76)) {
    Serial.println("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–∞—Ç—á–∏–∫ BME280. –ü—Ä–æ–≤–µ—Ä—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.");
    while (true); // –û—Å—Ç–∞–Ω–æ–≤–∫–∞
  }

  Serial.println("BME280 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ.");
}

void loop() {
  static unsigned long checkRainNow = millis();

  //–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∂–¥—è
  int rainAnalog = analogRead(RAIN_ANALOG_PIN);
  bool isRaining = rainAnalog < 1500;

  if (isRaining && !wasRaining) {
    Serial.println("üåßÔ∏è –î–æ–∂–¥—å –Ω–∞—á–∞–ª—Å—è!");
  }
  wasRaining = isRaining;

  // –û—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è
  if (millis() - lastMeasurementTime >= measurementInterval) {
    lastMeasurementTime = millis();
    measurementCount++;

    float temperature = bme.readTemperature();
    float humidity = bme.readHumidity();
    float pressure = bme.readPressure() / 100.0F; // –ì–ü–∞

    //–ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã
    String forecast = "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å";
    String reason = "";

    if (!isnan(lastTemp) && !isnan(lastHumidity)) {
      float tempChange = temperature - lastTemp;
      float humChange = humidity - lastHumidity;

      if (tempChange < 0 && humChange > 5 || isRaining) {
        forecast = "–í–æ–∑–º–æ–∂–Ω–æ –¥–æ–∂–¥—å üåßÔ∏è";
        reason = "–ü–æ—Ö–æ–ª–æ–¥–∞–ª–æ + ‚Üë–≤–ª–∞–∂–Ω–æ—Å—Ç—å";
      } else if (humChange < 2 && abs(tempChange) < 0.5) {
        forecast = "–°—Ç–∞–±–∏–ª—å–Ω–æ ‚òÄÔ∏è";
        reason = "–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π";
      } else {
        forecast = "–Ø—Å–Ω–æ ‚òÄÔ∏è";
        reason = "–ù–æ—Ä–º–∞–ª—å–Ω–æ";
      }
    } else {
      forecast = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö";
      reason = "–ü–µ—Ä–≤–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ";
    }

    //–°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
    lastTemp = temperature;
    lastHumidity = humidity;

    //–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
    time_t now = time(nullptr);
    struct tm timeinfo;
    localtime_r(&now, &timeinfo);
    char timeStr[9];
    strftime(timeStr, sizeof(timeStr), "%H:%M:%S", &timeinfo);

    // –í—ã–≤–æ–¥ –≤ Serial Monitor
    Serial.printf("[–ò–∑–º–µ—Ä–µ–Ω–∏–µ #%d] –í—Ä–µ–º—è: %s\n", measurementCount, timeStr);
    Serial.printf("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: %.1f¬∞C\n", temperature);
    Serial.printf("–í–ª–∞–∂–Ω–æ—Å—Ç—å: %.1f%%\n", humidity);
    Serial.printf("–î–∞–≤–ª–µ–Ω–∏–µ: %.0f hPa\n", pressure);
    Serial.printf("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–∂–¥—è (ADC): %d\n", rainAnalog);
    Serial.printf("–î–æ–∂–¥—å: %s\n", isRaining ? "–î–∞" : "–ù–µ—Ç");
    if (reason.length() > 0) {
      Serial.printf("–ü—Ä–∏—á–∏–Ω–∞: %s\n", reason.c_str());
    }
    Serial.printf("–ü—Ä–æ–≥–Ω–æ–∑: %s\n", forecast.c_str());
    Serial.println();

    delay(100);
  }

  delay(100); // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –¥–æ–∂–¥—è
}